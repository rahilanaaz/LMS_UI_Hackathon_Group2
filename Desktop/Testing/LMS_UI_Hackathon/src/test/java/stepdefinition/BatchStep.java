package stepdefinition;

import io.cucumber.java.After;
import org.testng.Assert;

import Page.BatchPage;
import Page.HomePage;
import Page.LoginPage;
import base.Base;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class BatchStep extends Base {

	String sizeOfBatchIDBefore;
	String sizeOfBatchNameBefore;
	String sizeOfBatchDescBefore;
	String sizeOfBatchStatusBefore;
	String sizeOfBatchClassesBefore;
	String sizeOfCreatedTimeBefore;
	String sizeOfModifiedTimeBefore;
	String batchName;
	String batchDesc;
	String batchStatus;
	String batchNoOfClasses;
	String updBatchName;
	String updBatchDesc;
	String updBatchNoOfClasses;

	BatchPage manageBatchesPage;
	HomePage homePage;
	LoginPage loginpage;
	
//	manageBatchesPage  = new BatchPage();

//	public BatchStep() {
//
//		super();
//	}

//	@Before("@Automate,@Batch")
//	public void setUp() {
//
//		initialize("chrome");
//		
//		
//
//	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Given("Admin is on Add tab of ADD\\/Edit batches page \\(admin) by clicking on Add Batch in Manage Batches Page\\(admin)")
	public void admin_is_on_add_tab_of_add_edit_batches_page_admin_by_clicking_on_add_batch_in_manage_batches_page_admin() {
		homePage = new HomePage();
		loginpage = new LoginPage();
		loginpage.loginClick();
		loginpage.signInPage(prop.getProperty("UserName"), prop.getProperty("Password"));
		homePage.clickOnBatches();
		manageBatchesPage.clickOnAddBatchBtn();
	}

	@When("Admin clicks on submit button after entering \"(.*)\" and \"(.*)\" and \"(.*)\" and \"(.*)\"")
	public void admin_clicks_on_submit_button_after_entering_batch_name_batch_description_select_batch_status_enters_batch_no_of_classes(
			String bName, String bDesc, String status, String bNoOfClasses) {

		batchName = bName;
		batchDesc = bDesc;
		batchStatus = status;
		batchNoOfClasses = bNoOfClasses;

		manageBatchesPage.addBatch(bName, bDesc, status, bNoOfClasses);
	}

	@Then("Created Batch details will be displayed in Manage Batches Page\\(Admin) with auto generated Created Date and Modified date in MM\\/DD\\/YY format")
	public void created_batch_details_will_be_displayed_in_manage_batches_page_admin_with_auto_generated_created_date_and_modified_date_in_mm_dd_yy_format() {

		Assert.assertEquals(manageBatchesPage.newAddedBatchName(), batchName);
		Assert.assertEquals(manageBatchesPage.newAddedBatchDesc(), batchDesc);
		Assert.assertEquals(manageBatchesPage.newAddedBatchStatus(), batchStatus);
		Assert.assertEquals(manageBatchesPage.newAddedBatchClasses(), batchNoOfClasses);
		Assert.assertNotNull(manageBatchesPage.newAddedBatchID());
		Assert.assertNotNull(manageBatchesPage.newAddedBatchCreationTime());
		Assert.assertNotNull(manageBatchesPage.newAddedBatchModifiedTime());
	}

	@Given("Admin is on Edit tab of ADD\\/Edit batches page \\(admin) by clicking on edit icon")
	public void admin_is_on_edit_tab_of_add_edit_batches_page_admin_by_clicking_on_edit_icon() {

		manageBatchesPage.clickOnEditBatchIconBtn();
	}

	@When("Admin clicks on submit button after updating details like \"(.*)\" and \"(.*)\" and \"(.*)\"")
	public void admin_clicks_on_submit_button_after_updating_batch_name_batch_description_select_batch_status_baych_no_of_classes(
			String batchName, String batchDesc, String batchNoOfClasses) {

		updBatchName = batchName;
		updBatchDesc = batchDesc;
		updBatchNoOfClasses = batchNoOfClasses;
		manageBatchesPage.editBatch(batchName, batchDesc, batchNoOfClasses);
	}

	@Then("Updated Batch details will be displayed in Manage Batches Page\\(Admin) screen with same autogenerated creation date and  different Modified date in MM\\/DD\\/YY format")
	public void updated_batch_details_will_be_displayed_in_manage_batches_page_admin_screen_with_same_autogenerated_creation_date_and_different_modified_date_in_mm_dd_yy_format() {

		Assert.assertEquals(manageBatchesPage.updatedBatchName(), updBatchName);
		Assert.assertEquals(manageBatchesPage.updatedBatchDesc(), updBatchDesc);
		Assert.assertEquals(manageBatchesPage.updatedBatchNoOfClasses(), updBatchNoOfClasses);
	}

	@Given("Admin is on Manage Batches Page\\(admin) screen")
	public void admin_is_on_manage_batches_page_admin_screen() {

		homePage.clickOnBatches();

		sizeOfBatchIDBefore = manageBatchesPage.batchIDListSize();
		sizeOfBatchNameBefore = manageBatchesPage.batchNameListSize();
		sizeOfBatchDescBefore = manageBatchesPage.batchDescListSize();
		sizeOfBatchStatusBefore = manageBatchesPage.batchStatusListSize();
		sizeOfBatchClassesBefore = manageBatchesPage.batchClassesListSize();
		sizeOfCreatedTimeBefore = manageBatchesPage.batchCreationTimeListSize();
		sizeOfModifiedTimeBefore = manageBatchesPage.batchModifiedTimeListSize();

	}

	@When("Admin clicks on particular batch trash icon")
	public void admin_clicks_on_particular_batch_trash_icon() {

		manageBatchesPage.deleteBatch();
	}

	@Then("Batch will be deleted from the Batches List in Manage Batches Page\\(admin)")
	public void batch_will_be_deleted_from_the_batches_list_in_manage_batches_page_admin() {

		String sizeOfBatchIDAfter = manageBatchesPage.batchIDListSize();
		String sizeOfBatchNameAfter = manageBatchesPage.batchNameListSize();
		String sizeOfBatchDescAfter = manageBatchesPage.batchDescListSize();
		String sizeOfBatchStatusAfter = manageBatchesPage.batchStatusListSize();
		String sizeOfBatchClassesAfter = manageBatchesPage.batchClassesListSize();
		String sizeOfCreatedTimeAfter = manageBatchesPage.batchCreationTimeListSize();
		String sizeOfModifiedTimeAfter = manageBatchesPage.batchModifiedTimeListSize();

		Assert.assertNotEquals(sizeOfBatchIDAfter, sizeOfBatchIDBefore);
		Assert.assertNotEquals(sizeOfBatchNameAfter, sizeOfBatchNameBefore);
		Assert.assertNotEquals(sizeOfBatchDescAfter, sizeOfBatchDescBefore);
		Assert.assertNotEquals(sizeOfBatchStatusAfter, sizeOfBatchStatusBefore);
		Assert.assertNotEquals(sizeOfBatchClassesAfter, sizeOfBatchClassesBefore);
		Assert.assertNotEquals(sizeOfCreatedTimeAfter, sizeOfCreatedTimeBefore);
		Assert.assertNotEquals(sizeOfModifiedTimeAfter, sizeOfModifiedTimeBefore);

	}

}
